#pragma kernel KernelLod                    SubdivisionKernel=KernelLod                    KERNEL_LOD
#pragma kernel KernelLodCulling             SubdivisionKernel=KernelLodCulling             KERNEL_LOD _CULLING
#pragma kernel KernelLodPnTriangle          SubdivisionKernel=KernelLodPnTriangle          KERNEL_LOD _PN_TRIANGLE
#pragma kernel KernelLodPnTriangleCulling   SubdivisionKernel=KernelLodPnTriangleCulling   KERNEL_LOD _PN_TRIANGLE _CULLING
#pragma kernel KernelLodPhongTess           SubdivisionKernel=KernelLodPhongTess           KERNEL_LOD _PHONG_TESSELLATION
#pragma kernel KernelLodPhongTessCulling    SubdivisionKernel=KernelLodPhongTessCulling    KERNEL_LOD _PHONG_TESSELLATION _CULLING
#pragma kernel KernelIndirectBatcher        SubdivisionKernel=KernelIndirectBatcher        KERNEL_INDIRECT_BATCHER
#pragma kernel KernelIndirectBatcherCulling SubdivisionKernel=KernelIndirectBatcherCulling KERNEL_INDIRECT_BATCHER _CULLING

#define FULLY_UNPACK

#define PRIMS_PER_THREAD 64u

#if defined(KERNEL_LOD)
#define NUM_THREADS PRIMS_PER_THREAD
#elif defined(KERNEL_INDIRECT_BATCHER)
#define NUM_THREADS 1
#endif

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.mesh-subdivision/ShaderLibrary/MeshSubdivisionCommon.hlsl"

CBUFFER_START(_ArgsBuffer)
    uint4 _ArgsOffsets;
CBUFFER_END

#define _Offset0 _ArgsOffsets.x
#define _Offset1 _ArgsOffsets.y
#define _Offset2 _ArgsOffsets.z
#define _Offset3 _ArgsOffsets.w

RWStructuredBuffer<IndirectArg>       _RWIndirectArgsBuffer;
RWStructuredBuffer<SubdivisionPacked> _RWSubdivision0Buffer;
RWStructuredBuffer<SubdivisionPacked> _RWSubdivision1Buffer;
RWStructuredBuffer<uint>              _RWCulledIndexBuffer;

#if defined(KERNEL_LOD)
#include "Lod.hlsl"
#elif defined(KERNEL_INDIRECT_BATCHER)
#include "IndirectBatcher.hlsl"
#endif

[numthreads(NUM_THREADS, 1,1)]
void SubdivisionKernel(uint3 id : SV_DispatchThreadID)
{
#if defined(KERNEL_LOD)
    IndirectArg arguments = _RWIndirectArgsBuffer[_Offset0];

    int threadId = id.x;
    int numSubd = arguments.arg3;

    if (threadId >= numSubd)
        return;

    SubdivisionPacked packed = _RWSubdivision0Buffer[threadId];

    Subdivision subd;
    UnpackSubdivision(packed, subd);

    Vertex vertexList[3];
    FetchVertex(subd.index, vertexList);

    float3x3 xf[2]; // [0]:target, [1]:parent
    KeyToXform(subd.key, xf[0], xf[1]);

    float3 subdHypotenuse[2]; // [0]:target hypotenuse, [1]:parent hypotenuse
    SubdivideTriangle(0.5, xf[0], vertexList, subdHypotenuse[0]);
    SubdivideTriangle(0.5, xf[1], vertexList, subdHypotenuse[1]);

    #ifdef _CULLING
    float3 subdPosition[3];
    SubdivideTriangle(subd.msb, xf[0], vertexList, subdPosition);

    bool culledBackFace = CullSubdivisionBackFace(subdPosition, 0.0);
    bool culledFruatum = CullSubdivisionFrustum(subdPosition, 0.0);

    UpdateCulledIndexBuffer(threadId, culledBackFace, culledFruatum);
    #endif

    float targetDist = distance(subdHypotenuse[0], _WorldSpaceCameraPos);
    float parentDist = distance(subdHypotenuse[1], _WorldSpaceCameraPos);

    int targetLod = (int)ComputeLod(targetDist);
    int parentLod = (int)ComputeLod(parentDist);

    UpdateSubdivisionBuffer(subd, targetLod, parentLod);
#elif defined(KERNEL_INDIRECT_BATCHER)

    //
    // for KernelLod

    int numSubd = min(MAX_SUBDIVISIONS, _RWSubdivision1Buffer.IncrementCounter());
    int dispatchX = (numSubd + PRIMS_PER_THREAD - 1) / PRIMS_PER_THREAD;
    int dispatchY = 1;
    int dispatchZ = 1;

    IndirectArg arguments;

    arguments.arg0 = dispatchX;
    arguments.arg1 = dispatchY;
    arguments.arg2 = dispatchZ;
    arguments.arg3 = numSubd;

    _RWIndirectArgsBuffer[_Offset1] = arguments;

    //
    // for DrawProcedural

    int indexCount = 3;
    int startIndex = 0;
    int startInstance = 0;

    int numPrims = _RWSubdivision0Buffer.IncrementCounter();

    // raw primitives
    arguments.arg0 = indexCount;
    arguments.arg1 = numPrims;
    arguments.arg2 = startIndex;
    arguments.arg3 = startInstance;

    _RWIndirectArgsBuffer[_Offset2] = arguments;

    #ifdef _CULLING
    int numCulled = _RWCulledIndexBuffer.IncrementCounter();

    // culled primitives
    arguments.arg0 = indexCount;
    arguments.arg1 = numCulled;
    arguments.arg2 = startIndex;
    arguments.arg3 = startInstance;

    _RWIndirectArgsBuffer[_Offset3] = arguments;
    #endif
#endif
}
